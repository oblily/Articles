replace() メソッド
　
文字列を置換した結果を、新しい文字列として取得するには、replace() メソッドを使用します。
　
このメソッドは、正規表現に対応しています。
　
このメソッドを使用した場合、正規表現オブジェクトの中身は変化しません。
　
String.replace( 検索 , 置換 ) :String
第01引数(略可)	*	検索文字列を指定する。「文字列」もしくは「正規表現オブジェクト」の指定が可能。
第02引数(略可)	*	置換文字列を指定する。「文字列」もしくは「コールバック関数」の指定が可能。
戻り値	String	置換後の結果を、新しい文字列として得られる。
　
■第01引数 （文字列を指定した場合）
　
第01引数に文字列を指定した場合、一度だけ置換されます。
　
文字列を検索し、置換した結果を取得する

// ------------------------------------------------------------
// 文字列を作成
// ------------------------------------------------------------
var str0 = "あい▲▲▲えお";

// ------------------------------------------------------------
// "▲▲▲" を "う" に置換する
// ------------------------------------------------------------
var str1 = str0.replace("▲▲▲","う");

// ------------------------------------------------------------
// 出力テスト
// ------------------------------------------------------------
console.log(str1); // "あいうえお"
　
■第01引数 （正規表現オブジェクトを指定した場合）
　
正規表現には、丸括弧 () を含める事ができます。
　
検索と置換を、最後まで繰り返したい場合は、"g" フラグを追加します。
　
正規表現オブジェクトを作成（繰り返しフラグ付き）

// 正規表現オブジェクトを作成（繰り返しフラグ付き）
var re = new RegExp("(.)","g");
　
■第02引数 （文字列を指定した場合）
　
第02引数に、文字列型を指定した場合の動作です。
　
第01引数に正規表現オブジェクトを指定した場合、以下のドルエスケープ文字の記述が可能です。
　
エスケープ文字	説明
$$	$ 文字の代替。
$1 〜 $99	n 番目の丸括弧とマッチした文字列を展開する。
$& (U+0026)	マッチした文字列全体を展開する。
$` (U+0060)	最先頭から、マッチした直前までの文字列を展開する。
$' (U+0027)	マッチした直後から、最後尾までの文字列を展開する。
　
ドルエスケープ文字の展開を確認する

// 文字列を作成
var str0 = "あいうえおかき";

// 正規表現オブジェクトを作成
var re = new RegExp("(う)(え)(お)","");

// 文字列を置換する
var str1 = str0.replace(re,"| left:$` match:$& p1:$1 p2:$2 p3:$3 right:$' |");

// 出力テスト
console.log(str1); // "...| left:あい match:うえお p1:う p2:え p3:お right:かき |..."
　
■第02引数 （コールバック関数を指定した場合）
　
第02引数に、関数型を指定した場合の動作です。
　
コールバック関数の仕様は、以下の通りです。
　
第01引数から、マッチした全体の文字列が得られます。
　
第02引数以降は、可変引数となります。
　
正規表現内の、丸括弧 () とマッチした文字列が、順番に得られます。
　
丸括弧の数だけ、引数を用意する必要があります。
　
（最終引数 - 1）から、マッチした文字列の位置が得られます。
　
最終引数から、文字列全体が得られます。
　
戻り値からは、置換後の文字列を返します。
　
正規表現オブジェクトに、繰り返しフラグ "g" の指定がある場合、コールバック関数は、繰り返し呼び出されます。
　
■使用例
　
正規表現オブジェクトを使って、繰り返し検索しすべて置換する

// ------------------------------------------------------------
// 文字列を作成
// ------------------------------------------------------------
var str0 = "□●●□□●●●□";

// ------------------------------------------------------------
// 正規表現オブジェクトを作成（繰り返しフラグ付き）
// ------------------------------------------------------------
var re = new RegExp("□","g");


// ------------------------------------------------------------
// "□" を "■" に置換する（文字列指定）
// ------------------------------------------------------------
var str1 = str0.replace(re,"■");

// ------------------------------------------------------------
// 出力テスト
// ------------------------------------------------------------
console.log(str1); // "■●●■■●●●■"


// ------------------------------------------------------------
// "□" を "■" に置換する（コールバック関数指定）
// ------------------------------------------------------------
var str2 = str0.replace(re,function (m,index,str){

	// 出力テスト
	console.log("index:" + index);

	// 置換する文字列を返す
	return "■";
});

// ------------------------------------------------------------
// 出力テスト
// ------------------------------------------------------------
console.log(str2); // "■●●■■●●●■"
　
丸括弧の展開動作を確認する

// ------------------------------------------------------------
// 文字列を作成
// ------------------------------------------------------------
var str0 = "★★★http://sub.example.com/aaa/bbb/ccc.html★★★";

// ------------------------------------------------------------
// 正規表現オブジェクトを作成
// ------------------------------------------------------------
var re = new RegExp("([a-z]*:)[/]*([^/]+)/([^?#]*)","");


// ------------------------------------------------------------
// ドルエスケープ文字を使って、丸括弧内を展開する
// ------------------------------------------------------------
var str1 = str0.replace(re,"「$1」「$2」「$3」");

// ------------------------------------------------------------
// 出力テスト
// ------------------------------------------------------------
console.log(str1); // "★★★「http:」「sub.example.com」「aaa/bbb/ccc.html」★★★"


// ------------------------------------------------------------
// コールバック関数を使って、丸括弧内を展開する
// ------------------------------------------------------------
var str2 = str0.replace(re,function (m,p1,p2,p3,index,str){

	// 出力テスト
	console.dir(arguments);

	// 置換する文字列を返す
	return "「" + p1 + "」「" + p2 + "」「" + p3 + "」";
});

// ------------------------------------------------------------
// 出力テスト
// ------------------------------------------------------------
console.log(str2); // "★★★「http:」「sub.example.com」「aaa/bbb/ccc.html」★★★"
　
置換機能を使わずに、繰り返し検索として活用する

// ------------------------------------------------------------
// HTML 文字列を作成
// ------------------------------------------------------------
var text_html = 
'<html>\n' +
'  <body>\n' +
'    <img src="http://sub.example.com/graphics/aaa.jpg">\n' +
'    <img src="http://sub.example.com/graphics/bbb.jpg">\n' +
'    <img src="http://sub.example.com/graphics/ccc.jpg">\n' +
'  </body>\n' +
'</html>';

// ------------------------------------------------------------
// 正規表現オブジェクトを作成（繰り返しフラグ付き）
// ------------------------------------------------------------
var re = new RegExp('<img[ \t\r\n]+[^>]*src[ \t\r\n]*=[ \t\r\n]*"([^"]+)"',"g");

// ------------------------------------------------------------
// 繰り返し検索（置換機能を無視）
// ------------------------------------------------------------
text_html.replace(re,function (m,p1,index,str){

	// 出力テスト
	console.dir(arguments);
	console.log("index:" + index);
	console.log("p1:" + p1);
	console.log(" --- ");

});