数値について（Number）
	数値型の精度は、64bit浮動小数点数（IEEE 754）です。
	論理演算や、シフト演算を行った場合、一時的に、32bit整数値として計算されます。
	Number コンストラクタを使って、数値を作成する事はできません。
	Number コンストラクタを使用すると、数値ではなく、オブジェクトを生成する事ができます。
		var obj = new Number(123.456);
		console.log(typeof(obj)); // "object"
		console.log(obj.valueOf()); // 123.456
		console.log(obj.toString()); // "123.456"
	最先頭に『 0o 』 と記述した場合、8 進数表記が可能です。
		var value0 = 0o0012;
	最先頭に『 0b 』 と記述した場合、2 進数表記が可能です。
		var value0 = 0b00000010;
	関数 isNaN ( * ) :Boolean
	  	数値型へ変換を試みてから、評価されます。(なので、isNaN("123");---> false  isNaN("あいうえお")-->true)
	  	非数（数値以外）である場合 true が得られる。それ以外の数値なら false が得られる。
	Number.isNaN ( * ) :Boolean
		非数（NaN）と厳密に一致する場合のみ true が得られる。それ以外は false が得られる。

		isNaN() 関数は、指定したデータを数値型に変換しようとします。
		そして結果が、数値以外であるかを評価します。
		Number.isNaN() メソッドは、指定したデータを数値型に変換しません。
		そして、NaN 値と厳密に等しいかを評価します。
		よって、数値型以外のデータを指定した場合、必ず false が得られます。  Number.isNaN("あいうえお");--->false
	Number.toFixed ( 小数の桁数 ) :String  0 〜 20 までの小数の桁数を指定。省略した場合 0
		小数の桁が足りない場合、近似値が得られます。
		小数の桁が余る場合、0 で埋められます。
		var value = 123.456789;
		console.log( value.toFixed( )  ); // "123"
		console.log( value.toFixed(4)  ); // "123.4568"
		console.log( value.toFixed(8)  ); // "123.45678900"
		console.log( value.toFixed(12) ); // "123.456789000000"
	Number.isInteger() メソッド
		整数である場合 true が得られる。それ以外なら false が得られる。
		Number.isInteger() メソッドは、指定したデータを数値型に変換しません。
	Number.parseInt ( * , n 進数 ) :Number
		文字列を先頭から解析して、整数値に変換するには、Number.parseInt() メソッドを使用します。
		先頭に、空白やタブや改行が存在する場合、スキップします。
		途中で整数値以外の情報が含まれる場合、その時点で解析を終了します。（切り捨て）
		変換に失敗した場合、非数となります。
		第02引数を省略した場合、16 進数表記 (0xDDDD) を、16 進数と解釈します。

	文字列から数値型に変換する
		Number ( * ) :Number	数値型に変換した結果が得られる。失敗した場合、非数が得られる。	
		単項加算演算子を使用する	
			任意のデータに、単項加算演算子 『 + 』 を記述すると、数値型に変換する事ができます。
			var str = "123.456";
			var value = +str;	// 単項加算演算子を使って、数値型に変換する
		parseInt() 関数を使用する （整数値に変換）
		parseFloat() 関数を使用する （小数値に変換）


	












