
グローバルな関数宣言の評価タイミングについて
	グローバルな関数宣言の場合、プログラムの実行が開始される前に、関数宣言が評価されます。
	グローバルな関数宣言は、関数宣言をプログラムの後方に記述しても動作する

ローカルな関数宣言の評価タイミングについて
	ローカルな関数宣言の場合、任意の関数スコープに入った瞬間に、スコープ内の関数宣言が評価されます。
	関数スコープに入るたびに、新しい関数オブジェクトが生成されます。

function 演算子を使用して、関数を動的に作成する
	関数を動的に生成する
		関数リテラルは、匿名関数、無名関数とも呼ばれます。
		var 変数 = function ( 引数 ){return 戻り値;};
		
	関数リテラルに関数名を記述する
		関数リテラル内から、自身の関数オブジェクトを取得したい場合に利用します。
		この関数名は、関数リテラル内でのみ利用可能です。
		var func_obj = function MyFunc(){
			console.log(MyFunc);
			console.log(func_obj === MyFunc); // true
			console.log(func_obj === arguments.callee); // true
		};

	関数リテラルの評価タイミングについて
		関数宣言と違って、関数リテラルが、先に評価される事はありません。
		プログラムが上から順番に実行され、関数リテラルまで到達した時点で、初めて関数オブジェクトが生成されます。
		すべての関数リテラルは、動的な関数として機能します。
		
	匿名関数を即時実行する
		// 匿名関数を即時実行する（スコープとして機能する）// ×関数スコープの外からローカル変数にアクセスできない
		(function (){
			var local_a = 123;
		})();

Function クラスのプロパティについて
	Arguments オブジェクトについて
		任意の関数内では、Arguments オブジェクトにアクセスする事ができます。	
		Arguments オブジェクトを取得するには、任意の関数内で、arguments 変数を使用します。console.log(arguments);
	Arguments オブジェクトのプロパティ一覧
		length	Number		引数から渡されたデータの総数を取得する。
			// 引数から渡されたデータを取得する
			var data = arguments[i];
		callee	Function	自身の関数オブジェクトを取得する。(strict モードでは、利用できません。)
		
Function クラスのメソッド一覧
	toString()	関数のソースコードを文字列として取得する。
	apply()	関数を実行する。(引数データは配列で指定)
		function MyFunc (argument1,argument2,argument3){};
		// 関数オブジェクトを取得する
		var func_obj = MyFunc;
		// 関数呼び出し演算子を使って、関数を実行する
		var result = func_obj(7,8,9);
		// apply() メソッドを使って、関数を実行する
		var obj = new Object();
		var result = func_obj.apply(obj,[7,8,9]);
	call()	関数を実行する。(引数データは可変引数で指定)
	bind()	束縛効果のある、新しい関数オブジェクトを生成する。
	isGenerator()	関数がジェネレータであるか調べる。
		関数内で yield 文が使用されている場合、true が得られます。


































