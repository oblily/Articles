文字列について（String）

文字コードについて
	テキストの読み込みや、テキストの出力などの処理には、UTF-8 が採用されます。

String コンストラクタについて---(Numberと一緒)
	String コンストラクタを使用すると、文字列ではなく、オブジェクトを生成する事ができます。
	new String ( "値情報" ) :Object

文字列リテラルについて
	文字列を作成するには、文字列リテラルを使用します。
	文字列全体を、シングルクォーテーション『' '』 か ダブルクォーテーション『" "』でくくります。

文字列の連結について
	連結演算子『 + 』『 += 』を使用すると、文字列同士を連結する事ができます。
	「数値」と「文字列」を連結すると、結果は「文字列」となります。
	数値の計算と、文字列の連結が混在している場合
		var str = 1 + 2 + 3 + "あいう" + 49 + 58 + 67 + "かきく";
		console.log(str); // "6あいう495867かきく"

文字列の比較について
	文字列同士が一致しているか調べる
		厳密等価演算子『 === 』を使用すると、文字列同士が一致しているか調べる事ができます。
	文字列同士を比較する
		比較演算子『 < 』『 > 』を使用すると、文字列同士を比較する事ができます。

String クラスのメソッド一覧
	String.fromCharCode( 文字コード ... ) :String	文字コードを指定して、文字列を取得する。（Unicode を指定します。）
	String.charAt( 位置 ) :String	位置を指定して、文字列から１文字を取得する。存在しない場合、空文字が得られる。
	String.charCodeAt( 位置 ) :Number	位置を指定して、文字列から文字コードを取得する。Unicode が得られる。存在しない場合、NaN 値が得られる。
	String.concat( 文字列 ... ) :String	２つ以上の文字列を繋げて、新しい文字列を取得する。
		連結演算子　『 + 』『 += 』　を使用した方が、高速で動作します。
	String.slice( 開始位置 , 終了位置 ) :String	開始位置と終了位置を指定して、新しい文字列を取得する。
		第02引数で指定する終了位置は、取得対象に含まれません。
	String.substring( 開始位置 , 終了位置 ) :String　	開始位置と終了位置を指定して、新しい文字列を取得する。（逆指定可）
		終了位置は、取得対象に含まれません。
		第01引数より小さい値を指定した場合、第02引数が開始位置となり、第01引数が終了位置となる。
	String.substr( 開始位置 , 個数 ) :String	開始位置と個数を指定して、新しい文字列を取得する。
		第02引数(略可)個数を指定。省略した場合は最後尾まで。0 以下の値を指定すると空文字が得られる。
	String.indexOf( "検索ワード" , 検索開始位置 ) :Number	最先頭から文字列内を検索し、見つかった位置を取得する。
		ワードが見つからなかった場合、-1 が得られる。
	String.lastIndexOf( "検索ワード" , 検索開始位置 ) :Number	最後尾から文字列内を検索し、見つかった位置を取得する。
	String.contains( "検索ワード" , 検索開始位置 ) :Boolean	最先頭から文字列内を検索し、任意のワードが含まれるか調べる。
		ワードが見つかった場合 true、見つからなかった場合 false が得られる。
	String.startsWith( "検索ワード" , 検索開始位置 ) :Boolean	最先頭から任意のワードが始まっているか調べる。
		指定した位置からワードが始まっている場合 true、それ以外の場合 false が得られる。
	String.endsWith( "検索ワード" , 検索開始位置 ) :Boolean	最後尾から任意のワードが始まっているか調べる。
	localeCompare( "比較文字列" , "言語コード" , オプション ) :Number	文字列同士を比較する。
		第01引数の方が、大きい場合 -1、一致する場合 0、小さい場合 +1 が得られる。
	toLowerCase()	大文字を小文字に変換した結果を取得する。（通常）
	toUpperCase()	小文字を大文字に変換した結果を取得する。（通常）
	toLocaleLowerCase()	大文字を小文字に変換した結果を取得する。（実行環境のロケールを考慮）
	toLocaleUpperCase()	小文字を大文字に変換した結果を取得する。（実行環境のロケールを考慮）
	trim()	連続する「空白,タブ,改行」を除去した結果を取得する。（最先頭と最後尾のみ）
	trimLeft()	連続する「空白,タブ,改行」を除去した結果を取得する。（最先頭のみ）
	trimRight()	連続する「空白,タブ,改行」を除去した結果を取得する。（最後尾のみ）


正規表現に対応しているメソッド
	String.split( 検索ワード , 分割制限 ) :Array	指定したワードで文字列を分割し、結果を配列で取得する。
		第01引数(略可)検索ワードを指定。「文字列」や「正規表現オブジェクト」の指定が可能。空文字を指定した場合、１文字つずつ分割される。
		第02引数(略可)分割を試みる回数の上限値を指定する。省略した場合、文字列の最後尾まで試みる。
		戻り値:新しい配列が得られる。ワードが見つからなかった場合、0 番目に元の文字列がそのまま格納されている。
		var str = "あ=いい=ううう=ええ=お";
		str.split("=");  // [ "あ" , "いい" , "ううう" , "ええ" , "お" ]
		var str = "ＡＡＡandＢＢandＣＣＣandＤandＥＥＥ";
		str.split("and" , 2); // [ "ＡＡＡ" , "ＢＢ" ]
		var str = "ＡＡＡ--ＢＢ----ＣＣＣ--Ｄ--------ＥＥＥ";
		var re = new RegExp("[-]+","");
		str.split(re); // [ "ＡＡＡ" , "ＢＢ" , "ＣＣＣ" , "Ｄ" , "ＥＥＥ" ]
	String.search( 検索ワード ) :Number	文字列内を検索し、マッチした位置を取得する。
		正規表現がマッチする場合、開始位置が得られる。正規表現がマッチしなかった場合、-1 が得られる。
		var str = "あいうえおかきくけこさしすせそ";
		str.search("かきくけこ"); // 5
		var re = new RegExp("(か)(.+)(こ)","");
		str.search(re);	// 5
	String.match( 検索ワード ) :*	文字列内を検索し、マッチした文字列を取得する。
		マッチする場合、オブジェクトが得られる。マッチしない場合、null が得られる。

	String.replace( 検索 , 置換 ) :String	文字列を置換した結果を、新しい文字列として取得する。

数値型から文字列に変換する
	String() 関数を使用する		String ( * ) :String
	連結演算子を使って、空文字列を連結する
		任意のデータを、空文字列と連結すると、文字列に変換する事ができます。
		var value = 123.456;
		var str = "" + value; // "123.456"
	

