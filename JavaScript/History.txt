ヒストリーについて
	ヒストリーは、セッション履歴を制御する機能がまとまっています。
	window.history プロパティを使用します。

HTML5 世代の新機能について
	新しいセッション履歴を、自由に追加できます。

ヒストリーのプロパティ一覧
	length	Number	セッション履歴の総数を取得する。
	state	Object	現在のページのセッション履歴のステートを取得する。(HTML5世代)

セッション履歴内の任意のページに移動する
	１つ前のページに戻る
		history.back();

	１つ次のページに進む
		history.forward();

	セッション履歴内の任意のページに移動する（相対指定）
		History.go( 相対位置 ) :Void
			進戻したい相対的なページ数を指定する。正数で進む。負数で戻る。0 で現在のページをリロード。省略した場合 0。
		history.go(2); //// ２つ次のページに進む（自身のウィンドウ）

新しいセッション履歴を作成する（HTML5世代）
	「新しいセッション履歴を１つ作成する」＋「新しいアドレスに遷移する」
		History.pushState( ステート情報 , "タイトル" , "URLアドレス" ) :Void	
			このメソッドを呼び出しても、現在の DOM 構造は一切変化しません。
			変化するのは、「セッション履歴」や「現在の URL」だけです。
			第01引数	Object	新しいページ用のステート情報を指定する。参照データはすべてコピーされる。
				ページを復元するために必要な情報を指定します。
			第02引数	String	タイトル情報を指定する。
			第03引数(略可)	String	URL アドレス情報を指定する。
		新しいアドレスへの HTTP 通信は発生しません。
		コンテンツを更新したい場合、JavaScript から手動的にリソースを読み込み、手動的に DOM を更新する必要があります。

現在のセッション履歴を上書きする（HTML5世代）
	「現在のセッション履歴を上書きする」＋「新しいアドレスに遷移する」
		History.replaceState( ステート情報 , "タイトル" , "URLアドレス" ) :Void
			このメソッドを呼び出しても、現在の DOM 構造は一切変化しません。
			変化するのは、「セッション履歴」や「現在の URL」だけです。
			
セッション履歴の進戻操作が発生したか調べる
	onpopstate イベントを使用します。
	このイベントは、ページの遷移が完了した直後に発行されます。

	イベントからステート情報を取得する
		登録したコールバック関数の引数から、PopStateEvent オブジェクトが得られます。
		state プロパティから、ステート情報が得られます。







